"""
XML Validator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ Kaspi.kz
–ú–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã kaspishopping.xsd
"""

import os
import logging
import requests
from lxml import etree
from typing import Tuple, Optional
import xml.etree.ElementTree as ET


class KaspiXMLValidator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã Kaspi.kz"""
    
    def __init__(self, schema_url: str = "http://kaspi.kz/kaspishopping.xsd"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        
        Args:
            schema_url: URL —Å—Ö–µ–º—ã XSD –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        self.schema_url = schema_url
        self.schema = None
        self.logger = logging.getLogger(__name__)
        
    def download_schema(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ö–µ–º—É XSD —Å —Å–∞–π—Ç–∞ Kaspi.kz
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã —Å {self.schema_url}")
            response = requests.get(self.schema_url, timeout=30)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º —Å—Ö–µ–º—É
            schema_doc = etree.fromstring(response.content)
            self.schema = etree.XMLSchema(schema_doc)
            
            self.logger.info("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞")
            return True
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã: {e}")
            return False
        except etree.XMLSyntaxError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ö–µ–º—ã: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ö–µ–º—ã: {e}")
            return False
    
    def validate_xml_string(self, xml_content: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç XML —Å—Ç—Ä–æ–∫—É –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã
        
        Args:
            xml_content: XML –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            
        Returns:
            Tuple[bool, str]: (–≤–∞–ª–∏–¥–µ–Ω –ª–∏ XML, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —É—Å–ø–µ—Ö–µ)
        """
        if not self.schema:
            if not self.download_schema():
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        
        try:
            # –ü–∞—Ä—Å–∏–º XML
            xml_doc = etree.fromstring(xml_content.encode('utf-8'))
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã
            if self.schema.validate(xml_doc):
                return True, "XML —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ Kaspi.kz"
            else:
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                errors = []
                for error in self.schema.error_log:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {error.line}: {error.message}")
                
                error_message = "–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(errors)
                return False, error_message
                
        except etree.XMLSyntaxError as e:
            return False, f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ XML: {e}"
        except Exception as e:
            return False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
    
    def validate_xml_file(self, file_path: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç XML —Ñ–∞–π–ª –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã
        
        Args:
            file_path: –ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É
            
        Returns:
            Tuple[bool, str]: (–≤–∞–ª–∏–¥–µ–Ω –ª–∏ XML, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —É—Å–ø–µ—Ö–µ)
        """
        if not os.path.exists(file_path):
            return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
        
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                xml_content = file.read()
            
            return self.validate_xml_string(xml_content)
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"
    
    def check_required_elements(self, xml_content: str) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ XML
        
        Args:
            xml_content: XML –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            
        Returns:
            Tuple[bool, str]: (–≤—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            root = ET.fromstring(xml_content)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
            namespace = {'kaspi': 'kaspiShopping'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            company = root.find('.//kaspi:company', namespace)
            if company is None:
                company = root.find('.//company')
            
            merchantid = root.find('.//kaspi:merchantid', namespace)
            if merchantid is None:
                merchantid = root.find('.//merchantid')
            
            offers = root.find('.//kaspi:offers', namespace)
            if offers is None:
                offers = root.find('.//offers')
            
            required_elements = {
                'company': company,
                'merchantid': merchantid,
                'offers': offers
            }
            
            missing_elements = []
            for element_name, element in required_elements.items():
                if element is None:
                    missing_elements.append(element_name)
            
            if missing_elements:
                return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(missing_elements)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            offers = root.find('.//offers')
            if offers is not None:
                for offer in offers.findall('offer'):
                    sku = offer.get('sku')
                    if not sku:
                        return False, "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ SKU"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    required_offer_elements = ['model', 'brand', 'price']
                    for req_elem in required_offer_elements:
                        if offer.find(req_elem) is None:
                            return False, f"–í –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ {sku} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç {req_elem}"
            
            return True, "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            
        except ET.ParseError as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}"


def validate_kaspi_xml(file_path: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–∞ Kaspi.kz
    
    Args:
        file_path: –ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    validator = KaspiXMLValidator()
    
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {file_path}")
    print("-" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML...")
    with open(file_path, 'r', encoding='utf-8') as f:
        xml_content = f.read()
    
    structure_valid, structure_message = validator.check_required_elements(xml_content)
    if structure_valid:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ XML –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {structure_message}")
        return
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã
    print("\n2. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã Kaspi.kz...")
    schema_valid, schema_message = validator.validate_xml_file(file_path)
    
    if schema_valid:
        print("‚úÖ XML —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ Kaspi.kz")
        print(f"üìù {schema_message}")
    else:
        print("‚ùå XML –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ")
        print(f"üìù {schema_message}")
    
    print("-" * 50)
    print(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–†–û–ô–î–ï–ù' if structure_valid and schema_valid else '–ù–ï –ü–†–û–ô–î–ï–ù'}")


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    import sys
    
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python xml_validator.py <–ø—É—Ç—å_–∫_xml_—Ñ–∞–π–ª—É>")
        print("–ü—Ä–∏–º–µ—Ä: python xml_validator.py kaspi_price_list.xml")
        sys.exit(1)
    
    xml_file_path = sys.argv[1]
    validate_kaspi_xml(xml_file_path)
