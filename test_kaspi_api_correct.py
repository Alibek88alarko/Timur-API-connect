#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Kaspi API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ endpoint'–∞–º–∏ (2025)
–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""
import requests
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

print("=" * 70)
print("üß™ –¢–ï–°–¢ KASPI API –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò ENDPOINT'–ê–ú–ò")
print("=" * 70)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
KASPI_TOKEN = os.getenv('KASPI_TOKEN')
BASE_URL = "https://kaspi.kz"

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
HEADERS = {
    'Content-Type': 'application/vnd.api+json',
    'X-Auth-Token': KASPI_TOKEN
}

print(f"\nüîë –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {KASPI_TOKEN[:15]}..." if KASPI_TOKEN else "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")

# –°–ø–∏—Å–æ–∫ endpoint'–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ENDPOINTS_TO_TEST = [
    {
        "name": "–ó–∞–∫–∞–∑—ã - –ë–∞–∑–æ–≤—ã–π",
        "url": f"{BASE_URL}/shop/api/v2/orders",
        "method": "GET",
        "params": {
            "page[number]": 0,
            "page[size]": 1
        }
    },
    {
        "name": "–ó–∞–∫–∞–∑—ã - –ù–æ–≤—ã–µ (APPROVED_BY_BANK)",
        "url": f"{BASE_URL}/shop/api/v2/orders",
        "method": "GET",
        "params": {
            "page[number]": 0,
            "page[size]": 5,
            "filter[orders][status]": "APPROVED_BY_BANK"
        }
    },
    {
        "name": "–ó–∞–∫–∞–∑—ã - –ü—Ä–∏–Ω—è—Ç—ã–µ",
        "url": f"{BASE_URL}/shop/api/v2/orders",
        "method": "GET",
        "params": {
            "page[number]": 0,
            "page[size]": 5,
            "filter[orders][status]": "ACCEPTED_BY_MERCHANT"
        }
    },
    {
        "name": "–¢–æ–≤–∞—Ä—ã (Products)",
        "url": f"{BASE_URL}/shop/api/v2/products",
        "method": "GET",
        "params": {
            "page[number]": 0,
            "page[size]": 1
        }
    },
]

print("\n" + "=" * 70)
print("üì° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT'–û–í")
print("=" * 70)

success_count = 0
fail_count = 0
working_endpoints = []

for endpoint in ENDPOINTS_TO_TEST:
    print(f"\nüîó {endpoint['name']}")
    print(f"   URL: {endpoint['url']}")
    print(f"   –ú–µ—Ç–æ–¥: {endpoint['method']}")
    
    if endpoint.get('params'):
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {endpoint['params']}")
    
    try:
        if endpoint['method'] == 'GET':
            response = requests.get(
                endpoint['url'],
                headers=HEADERS,
                params=endpoint.get('params', {}),
                timeout=15
            )
        else:
            response = requests.post(
                endpoint['url'],
                headers=HEADERS,
                json=endpoint.get('body', {}),
                timeout=15
            )
        
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code == 200:
            print(f"   ‚úÖ –£–°–ü–ï–•! API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            try:
                data = response.json()
                if 'data' in data:
                    items_count = len(data['data']) if isinstance(data['data'], list) else 1
                    print(f"   üì¶ –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items_count}")
                    
                    if items_count > 0:
                        print(f"   üìù –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
                        first_item = data['data'][0] if isinstance(data['data'], list) else data['data']
                        if 'type' in first_item:
                            print(f"      - –¢–∏–ø: {first_item['type']}")
                        if 'id' in first_item:
                            print(f"      - ID: {first_item['id']}")
                        if 'attributes' in first_item:
                            attrs = first_item['attributes']
                            if 'code' in attrs:
                                print(f"      - –ö–æ–¥: {attrs['code']}")
                            if 'status' in attrs:
                                print(f"      - –°—Ç–∞—Ç—É—Å: {attrs['status']}")
                else:
                    print(f"   üìÑ –û—Ç–≤–µ—Ç: {str(data)[:100]}...")
            except:
                print(f"   üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}...")
            
            success_count += 1
            working_endpoints.append(endpoint['name'])
            
        elif response.status_code == 401:
            print(f"   üîê 401 Unauthorized - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º!")
            print(f"      –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")
            fail_count += 1
            
        elif response.status_code == 403:
            print(f"   üö´ 403 Forbidden - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
            print(f"      –†–µ—à–µ–Ω–∏–µ: API –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤")
            fail_count += 1
            
        elif response.status_code == 404:
            print(f"   ‚ùì 404 Not Found - Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print(f"      –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL")
            fail_count += 1
            
        elif response.status_code == 400:
            print(f"   ‚ö†Ô∏è 400 Bad Request - –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
            try:
                error_data = response.json()
                print(f"      –î–µ—Ç–∞–ª–∏: {error_data}")
            except:
                print(f"      –û—Ç–≤–µ—Ç: {response.text[:200]}")
            fail_count += 1
            
        else:
            print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {response.text[:200]}")
            fail_count += 1
            
    except requests.exceptions.Timeout:
        print(f"   ‚è∞ TIMEOUT - –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        print(f"      –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"      - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print(f"      - –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
        print(f"      - –ù–µ–≤–µ—Ä–Ω—ã–π endpoint")
        fail_count += 1
        
    except requests.exceptions.ConnectionError as e:
        print(f"   ‚ùå CONNECTION ERROR - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print(f"      –î–µ—Ç–∞–ª–∏: {str(e)[:100]}")
        fail_count += 1
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {type(e).__name__}")
        print(f"      –î–µ—Ç–∞–ª–∏: {str(e)[:100]}")
        fail_count += 1

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
print("\n" + "=" * 70)
print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
print("=" * 70)

print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}")
print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {fail_count}")
print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count / (success_count + fail_count) * 100):.1f}%")

if working_endpoints:
    print(f"\nüéØ –†–ê–ë–û–¢–ê–Æ–©–ò–ï ENDPOINT'–´:")
    for ep in working_endpoints:
        print(f"   ‚úÖ {ep}")
else:
    print(f"\n‚ö†Ô∏è –ù–ò –û–î–ò–ù ENDPOINT –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
    print(f"\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
    print(f"   1. –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω")
    print(f"   2. API –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")
    print(f"   3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ IP")
    print(f"   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é/firewall")
    
    print(f"\nüîß –ß–¢–û –î–ï–õ–ê–¢–¨:")
    print(f"   1. –ó–∞–π–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: https://kaspi.kz/merchantcabinet/")
    print(f"   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí API")
    print(f"   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ/–æ–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω")
    print(f"   5. –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: 2323")

print("\n" + "=" * 70)
print("üìû –¢–ï–•–ü–û–î–î–ï–†–ñ–ö–ê KASPI: 2323 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)")
print("=" * 70)
