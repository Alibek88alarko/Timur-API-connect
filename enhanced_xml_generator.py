#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä XML —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è Kaspi
"""
import json
import time
import logging
from xml.etree.ElementTree import Element, SubElement, tostring
import xml.dom.minidom
from Script import get_al_style_products
from config import config

def generate_enhanced_xml(products):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π XML —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ XML –¥–ª—è Kaspi.kz")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
    kaspi_catalog = Element('kaspi_catalog', {
        'date': time.strftime('%Y-%m-%dT%H:%M:%S'),
        'xmlns': 'kaspiShopping',
        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation': 'kaspiShopping http://kaspi.kz/kaspishopping.xsd'
    })
    
    # –ö–æ–º–ø–∞–Ω–∏—è
    company = SubElement(kaspi_catalog, 'company')
    company.text = config.company_name
    
    # ID –ø—Ä–æ–¥–∞–≤—Ü–∞
    merchantid = SubElement(kaspi_catalog, 'merchantid')
    merchantid.text = config.merchant_id
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    categories = SubElement(kaspi_catalog, 'categories')
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
    category_mapping = {
        '–ö–∞–±–µ–ª–∏': 'cables',
        '–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã': 'keyboards', 
        '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã': 'accessories',
        '–ü–∞—Ç—á-–∫–æ—Ä–¥—ã': 'patch-cords',
        '–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': 'network'
    }
    
    for cat_name, cat_id in category_mapping.items():
        category = SubElement(categories, 'category', {
            'id': cat_id,
            'parentId': 'electronics'
        })
        category.text = cat_name
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    offers = SubElement(kaspi_catalog, 'offers')
    
    processed_count = 0
    
    for product in products:
        try:
            # SKU - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            sku = str(product.get('article_pn') or product.get('article') or '').strip()
            if not sku:
                continue
                
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name = product.get('name', '').strip()
            if not name:
                continue
                
            offer = SubElement(offers, 'offer', {
                'sku': sku,
                'available': 'true'
            })
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            model = SubElement(offer, 'model')
            model.text = name
            
            # –ë—Ä–µ–Ω–¥
            brand = SubElement(offer, 'brand')
            brand.text = product.get('brand', 'No Brand').strip()
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            category_id = determine_category(name)
            categoryId = SubElement(offer, 'categoryId')
            categoryId.text = category_id
            
            # –¶–µ–Ω–∞
            price = SubElement(offer, 'price')
            price_value = product.get('price2') or product.get('price1') or '0'
            price.text = str(price_value)
            
            # –í–∞–ª—é—Ç–∞
            currencyId = SubElement(offer, 'currencyId')
            currencyId.text = 'KZT'
            
            # –û–ø–∏—Å–∞–Ω–∏–µ (–≤–∞–∂–Ω–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!)
            description = SubElement(offer, 'description')
            description.text = create_description(product)
            
            # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            availabilities = SubElement(offer, 'availabilities')
            quantity = get_stock_count(product.get('quantity'))
            
            availability = SubElement(availabilities, 'availability', {
                'available': 'yes' if int(quantity) > 0 else 'no',
                'storeId': config.store_id,
                'preOrder': '0',
                'stockCount': quantity
            })
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = SubElement(offer, 'params')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            add_param(params, '–ê—Ä—Ç–∏–∫—É–ª', sku)
            add_param(params, '–ë—Ä–µ–Ω–¥', product.get('brand', 'No Brand'))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if product.get('weight'):
                add_param(params, '–í–µ—Å', str(product.get('weight')))
            
            processed_count += 1
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {sku}: {e}")
            continue
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML
    rough_string = tostring(kaspi_catalog, encoding='utf-8')
    reparsed = xml.dom.minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = f'kaspi_enhanced_{time.strftime("%Y%m%d_%H%M%S")}.xml'
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(pretty_xml)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π XML: {filename}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed_count}")
    
    return filename

def determine_category(name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    name_lower = name.lower()
    
    if '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞' in name_lower:
        return 'keyboards'
    elif '–∫–∞–±–µ–ª—å' in name_lower or '–ø–∞—Ç—á' in name_lower:
        return 'cables'
    elif '–∫–æ—Ä–¥' in name_lower:
        return 'patch-cords'
    else:
        return 'accessories'

def create_description(product):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    name = product.get('name', '')
    brand = product.get('brand', '')
    
    description = f"{name}"
    
    if brand and brand != 'Unknown':
        description += f" –æ—Ç {brand}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if product.get('price1'):
        description += f". –¶–µ–Ω–∞: {product.get('price1')} —Ç–µ–Ω–≥–µ"
    
    return description

def add_param(params_element, name, value):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ XML"""
    param = SubElement(params_element, 'param', {'name': name})
    param.text = str(value)

def get_stock_count(quantity):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    if isinstance(quantity, str):
        quantity = quantity.strip()
        if '>' in quantity:
            return '500'
        elif quantity.isdigit():
            return quantity
        else:
            return '0'
    elif isinstance(quantity, (int, float)):
        return str(int(quantity))
    else:
        return '0'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ XML –¥–ª—è Kaspi.kz")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    products = get_al_style_products()
    
    if not products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML
    xml_file = generate_enhanced_xml(products)
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÅ –§–∞–π–ª: {xml_file}")
    print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print(f"  1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª {xml_file} –≤ –∫–∞–±–∏–Ω–µ—Ç Kaspi")
    print(f"  2. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤—Å–µ –µ—â–µ '–Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ' - –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    print(f"  3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É Kaspi: 2323")

if __name__ == "__main__":
    main()
