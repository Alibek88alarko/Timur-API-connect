#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ URL
"""
import requests
import time
import os
from dotenv import load_dotenv

load_dotenv()

def test_kaspi_with_alternatives():
    """–¢–µ—Å—Ç Kaspi API —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ URL"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kaspi API —Å —Ä–∞–∑–Ω—ã–º–∏ URL...")
    
    token = os.getenv('KASPI_TOKEN')
    headers = {
        'Content-Type': 'application/vnd.api+json',
        'X-Auth-Token': token
    }
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    urls_to_test = [
        "https://kaspi.kz/shop/api/v2/orders",
        "https://merchant.kaspi.kz/api/v2/orders", 
        "https://api.kaspi.kz/shop/v2/orders",
        "https://kaspi.kz/merchantapi/v1/orders"
    ]
    
    params = {
        'page[number]': 0,
        'page[size]': 5
    }
    
    for i, url in enumerate(urls_to_test, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}")
        try:
            response = requests.get(url, headers=headers, params=params, timeout=10)
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                orders = data.get('data', [])
                print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
                print(f"   üéâ –†–ê–ë–û–ß–ò–ô URL: {url}")
                return url
            elif response.status_code == 401:
                print(f"   üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω")
            elif response.status_code == 403:
                print(f"   üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}...")
                
        except requests.exceptions.Timeout:
            print(f"   ‚è∞ Timeout")
        except requests.exceptions.ConnectionError:
            print(f"   üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return None

def main():
    print("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç Kaspi API")
    print("=" * 50)
    
    token = os.getenv('KASPI_TOKEN')
    if not token:
        print("‚ùå KASPI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {token[:10]}...")
    
    working_url = test_kaspi_with_alternatives()
    
    if working_url:
        print(f"\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–±–Ω–æ–≤–∏—Ç–µ KASPI_API_URL –≤ .env:")
        print(f"KASPI_API_URL={working_url.replace('/orders', '')}")
    else:
        print("\n‚ùå –ù–∏ –æ–¥–∏–Ω URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Kaspi")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        print("   3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É Kaspi: 2323")

if __name__ == "__main__":
    main()
