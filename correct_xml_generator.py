#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä XML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
"""
import json
import time
import logging
from xml.etree.ElementTree import Element, SubElement, tostring
import xml.dom.minidom
from Script import get_al_style_products
from config import config

def generate_correct_xml(products):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ XML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
    kaspi_catalog = Element('kaspi_catalog', {
        'date': time.strftime('%Y-%m-%dT%H:%M:%S'),
        'xmlns': 'kaspiShopping',
        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation': 'kaspiShopping http://kaspi.kz/kaspishopping.xsd'
    })
    
    # –ö–æ–º–ø–∞–Ω–∏—è
    company = SubElement(kaspi_catalog, 'company')
    company.text = config.company_name
    
    # ID –ø—Ä–æ–¥–∞–≤—Ü–∞
    merchantid = SubElement(kaspi_catalog, 'merchantid')
    merchantid.text = config.merchant_id
    
    # Offers
    offers = SubElement(kaspi_catalog, 'offers')
    
    processed_count = 0
    
    for product in products:
        try:
            # SKU - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            sku = str(product.get('article_pn') or product.get('article') or '').strip()
            if not sku:
                continue
                
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name = product.get('name', '').strip()
            if not name:
                continue
                
            offer = SubElement(offers, 'offer', {
                'sku': sku
            })
            
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º XML):
            # 1. model
            model = SubElement(offer, 'model')
            model.text = name
            
            # 2. brand
            brand = SubElement(offer, 'brand')
            brand.text = product.get('brand', 'Unknown').strip()
            
            # 3. availabilities (–ø–µ—Ä–µ–¥ price!)
            availabilities = SubElement(offer, 'availabilities')
            quantity = get_stock_count(product.get('quantity'))
            
            availability = SubElement(availabilities, 'availability', {
                'available': 'yes' if int(quantity) > 0 else 'no',
                'storeId': config.store_id,
                'preOrder': '0',
                'stockCount': quantity
            })
            
            # 4. price (–ø–æ—Å–ª–µ availabilities!)
            price = SubElement(offer, 'price')
            price_value = product.get('price2') or product.get('price1') or '0'
            price.text = str(price_value)
            
            processed_count += 1
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {sku}: {e}")
            continue
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML
    rough_string = tostring(kaspi_catalog, encoding='utf-8')
    reparsed = xml.dom.minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = f'kaspi_correct_{time.strftime("%Y%m%d_%H%M%S")}.xml'
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(pretty_xml)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π XML: {filename}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {processed_count}")
    print(f"üîß –ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: model ‚Üí brand ‚Üí availabilities ‚Üí price")
    
    return filename

def get_stock_count(quantity):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    if isinstance(quantity, str):
        quantity = quantity.strip()
        if '>' in quantity:
            return '500'
        elif quantity.isdigit():
            return quantity
        else:
            return '0'
    elif isinstance(quantity, (int, float)):
        return str(int(quantity))
    else:
        return '0'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–û–†–†–ï–ö–¢–ù–û–ì–û XML –¥–ª—è Kaspi.kz")
    print("=" * 50)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("   model ‚Üí brand ‚Üí availabilities ‚Üí price")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    products = get_al_style_products()
    
    if not products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML
    xml_file = generate_correct_xml(products)
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìÅ –§–∞–π–ª: {xml_file}")
    print(f"üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è:")
    print(f"  - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print(f"  - availabilities –î–û price")
    print(f"  - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ XSD")
    print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"  1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª {xml_file} –≤ –∫–∞–±–∏–Ω–µ—Ç Kaspi")
    print(f"  2. –î–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é XSD")
    print(f"  3. –û–∂–∏–¥–∞–µ—Ç—Å—è: '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}'")

if __name__ == "__main__":
    main()
