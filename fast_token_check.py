#!/usr/bin/env python3
"""
–ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ endpoint'—ã
"""
import requests
import os
from dotenv import load_dotenv

load_dotenv()

KASPI_TOKEN = os.getenv('KASPI_TOKEN')
print("=" * 70)
print("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê")
print("=" * 70)
print(f"\nüîë –¢–æ–∫–µ–Ω: {KASPI_TOKEN[:25]}..." if KASPI_TOKEN else "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ö—Ä–∏—Ç–∏—á–Ω—ã–µ endpoint'—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º timeout
TESTS = [
    {
        "name": "XML Upload API (POST)",
        "method": "POST",
        "url": "https://kaspi.kz/shop/api/v2/product/import",
        "headers": {
            'Content-Type': 'application/xml',
            'X-Auth-Token': KASPI_TOKEN
        },
        "data": '<?xml version="1.0" encoding="UTF-8"?><root></root>'
    },
    {
        "name": "Products GET",
        "method": "GET",
        "url": "https://kaspi.kz/shop/api/v2/products",
        "headers": {
            'X-Auth-Token': KASPI_TOKEN
        },
        "data": None
    },
    {
        "name": "API Root",
        "method": "GET",
        "url": "https://kaspi.kz/shop/api",
        "headers": {
            'X-Auth-Token': KASPI_TOKEN
        },
        "data": None
    },
    {
        "name": "Merchant API",
        "method": "GET",
        "url": "https://merchant.kaspi.kz/api/v2/orders",
        "headers": {
            'X-Auth-Token': KASPI_TOKEN
        },
        "data": None
    }
]

print("\n" + "=" * 70)

for i, test in enumerate(TESTS, 1):
    print(f"\n[{i}/{len(TESTS)}] {test['name']}")
    print(f"   {test['method']} {test['url']}")
    
    try:
        if test['method'] == 'POST':
            response = requests.post(
                test['url'],
                headers=test['headers'],
                data=test['data'],
                timeout=5
            )
        else:
            response = requests.get(
                test['url'],
                headers=test['headers'],
                timeout=5
            )
        
        status = response.status_code
        print(f"   ‚úÖ HTTP {status}")
        
        if status == 200:
            print(f"   üéâ –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
        elif status == 401:
            print(f"   üîê 401 - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        elif status == 403:
            print(f"   üö´ 403 - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        elif status == 400:
            print(f"   ‚ö†Ô∏è 400 - –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            print(f"   üìÑ {response.text[:200]}")
        elif status == 404:
            print(f"   ‚ùì 404 - Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"   ‚ö†Ô∏è {response.text[:200]}")
            
    except requests.exceptions.Timeout:
        print(f"   ‚è∞ TIMEOUT (5 —Å–µ–∫)")
    except requests.exceptions.ConnectionError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    except Exception as e:
        print(f"   ‚ùå {type(e).__name__}: {str(e)[:100]}")

print("\n" + "=" * 70)
print("üí° –í–ê–ñ–ù–û:")
print("=" * 70)
print("""
–ï—Å–ª–∏ –í–°–ï endpoint'—ã –¥–∞—é—Ç TIMEOUT:
‚Üí –¢–æ–∫–µ–Ω –ù–ï –¥–ª—è REST API, –≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

–ï—Å–ª–∏ –µ—Å—Ç—å 401/403:
‚Üí –¢–æ–∫–µ–Ω –¥–ª—è API, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫

–ï—Å–ª–∏ –µ—Å—Ç—å 400:
‚Üí –¢–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞

–ï—Å–ª–∏ –µ—Å—Ç—å 200:
‚Üí –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! üéâ
""")
print("=" * 70)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞ —Ç–æ–∫–µ–Ω
print("\nüîç –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê:")
print(f"   –î–ª–∏–Ω–∞: {len(KASPI_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"   –§–æ—Ä–º–∞—Ç: {'Base64' if KASPI_TOKEN.endswith('=') else '–û–±—ã—á–Ω—ã–π'}")

if len(KASPI_TOKEN) == 44 and KASPI_TOKEN.endswith('='):
    print("   ‚úÖ –ü–æ—Ö–æ–∂ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API —Ç–æ–∫–µ–Ω Kaspi")
else:
    print("   ‚ö†Ô∏è –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è Kaspi API —Ç–æ–∫–µ–Ω–∞")
