#!/usr/bin/env python3
"""
–û–±—Ö–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Ä–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —Å Al-Style –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Kaspi API
"""
import requests
import json
import time
import logging
import os
from xml.etree.ElementTree import Element, SubElement, tostring
import xml.dom.minidom
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'logs/api_fallback_{time.strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)

class APIFallback:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å –æ–±—Ö–æ–¥–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.al_style_token = os.getenv('AL_STYLE_TOKEN')
        self.kaspi_token = os.getenv('KASPI_TOKEN')
        self.al_style_url = os.getenv('AL_STYLE_API_URL', 'https://api.al-style.kz/api')
        
    def get_al_style_products(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Al-Style —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        logging.info('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Al-Style...')
        
        url = f"{self.al_style_url}/elements-pagination"
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        
        params = {
            'access-token': self.al_style_token,
            'limit': 100,
            'offset': 0,
            'additional_fields': 'brand,price1,price2,quantity,article_pn'
        }
        
        all_products = []
        
        try:
            while True:
                response = requests.get(url, headers=headers, params=params, timeout=30)
                
                if response.status_code != 200:
                    logging.error(f'–û—à–∏–±–∫–∞ Al-Style API: {response.status_code}')
                    break
                
                data = response.json()
                products = data.get('elements', [])
                all_products.extend(products)
                
                logging.info(f'–ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –≤—Å–µ–≥–æ: {len(all_products)}')
                
                pagination = data.get('pagination', {})
                if pagination.get('currentPage') >= pagination.get('totalPages'):
                    break
                
                params['offset'] += params['limit']
                time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}')
            
        return all_products
    
    def generate_xml_only(self, products):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML —Ñ–∞–π–ª–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        logging.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML —Ñ–∞–π–ª–∞...')
        
        # –°–æ–∑–¥–∞–µ–º XML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        kaspi_catalog = Element('kaspi_catalog', {
            'date': time.strftime('%Y-%m-%dT%H:%M:%S'),
            'xmlns': 'kaspiShopping',
            'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
            'xsi:schemaLocation': 'kaspiShopping http://kaspi.kz/kaspishopping.xsd'
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
        company = SubElement(kaspi_catalog, 'company')
        company.text = os.getenv('COMPANY_NAME', 'Al-Style')
        
        merchantid = SubElement(kaspi_catalog, 'merchantid')
        merchantid.text = os.getenv('MERCHANT_ID', '01')
        
        offers = SubElement(kaspi_catalog, 'offers')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        for product in products:
            sku = str(product.get('article_pn') or product.get('article') or '').strip()
            if not sku:
                continue
            
            offer = SubElement(offers, 'offer', {'sku': sku})
            
            # –ú–æ–¥–µ–ª—å
            model = SubElement(offer, 'model')
            model.text = product.get('name', 'No Name').strip()
            
            # –ë—Ä–µ–Ω–¥
            brand = SubElement(offer, 'brand')
            brand.text = product.get('brand', 'Unknown').strip()
            
            # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            availabilities = SubElement(offer, 'availabilities')
            quantity = product.get('quantity', 0)
            stock_count = self._get_stock_count(quantity)
            
            availability = SubElement(availabilities, 'availability', {
                'available': 'yes' if int(stock_count) > 0 else 'no',
                'storeId': os.getenv('STORE_ID', 'myFavoritePickupPoint1'),
                'preOrder': '0',
                'stockCount': stock_count
            })
            
            # –¶–µ–Ω–∞
            price = SubElement(offer, 'price')
            price.text = str(product.get('price2') or product.get('price1') or '0')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º XML
        rough_string = tostring(kaspi_catalog, encoding='utf-8')
        reparsed = xml.dom.minidom.parseString(rough_string)
        pretty_xml = reparsed.toprettyxml(indent="  ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f'kaspi_price_list_{time.strftime("%Y%m%d_%H%M%S")}.xml'
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(pretty_xml)
        
        logging.info(f'XML —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}')
        return filename
    
    def _get_stock_count(self, quantity):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
        if isinstance(quantity, str):
            quantity = quantity.strip()
            if '>' in quantity:
                return '500'
            elif quantity.isdigit():
                return quantity
            else:
                return '0'
        elif isinstance(quantity, (int, float)):
            return str(int(quantity))
        else:
            return '0'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ö–æ–¥–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å –æ–±—Ö–æ–¥–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ Al-Style)")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('logs', exist_ok=True)
    
    fallback = APIFallback()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ Al-Style
    products = fallback.get_al_style_products()
    
    if not products:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Al-Style")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML —Ñ–∞–π–ª
    xml_file = fallback.generate_xml_only(products)
    
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω XML —Ñ–∞–π–ª: {xml_file}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Kaspi.kz")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ XML —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é")
    print("3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É Kaspi –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")

if __name__ == "__main__":
    main()
