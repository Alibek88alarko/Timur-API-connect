#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Kaspi.kz —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
"""
import time
import datetime
import schedule
import logging
from Script import get_al_style_products, update_kaspi_prices_stock
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('kaspi_auto_upload.log'),
        logging.StreamHandler()
    ]
)

class KaspiAutoUploader:
    def __init__(self):
        self.last_upload_time = None
        self.upload_limit_reset_time = None
        
    def check_upload_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"""
        current_time = datetime.datetime.now()
        
        if self.upload_limit_reset_time:
            if current_time < self.upload_limit_reset_time:
                time_left = self.upload_limit_reset_time - current_time
                logging.info(f"‚è∞ –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ {self.upload_limit_reset_time.strftime('%H:%M')}")
                logging.info(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_left}")
                return False
        
        return True
    
    def set_upload_limit(self, reset_time_str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞"""
        today = datetime.date.today()
        try:
            reset_time = datetime.datetime.strptime(f"{today} {reset_time_str}", "%Y-%m-%d %H:%M")
            if reset_time < datetime.datetime.now():
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
                reset_time += datetime.timedelta(days=1)
            
            self.upload_limit_reset_time = reset_time
            logging.info(f"üïê –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ: {reset_time.strftime('%Y-%m-%d %H:%M')}")
        except ValueError:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {reset_time_str}")
    
    def upload_products(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ Kaspi.kz"""
        if not self.check_upload_availability():
            return False
        
        try:
            logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ Kaspi.kz")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            products = get_al_style_products()
            if not products:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Al-Style")
                return False
            
            logging.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º XML
            result = update_kaspi_prices_stock()
            
            if result:
                self.last_upload_time = datetime.datetime.now()
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ {self.last_upload_time.strftime('%H:%M')}")
                return True
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return False
    
    def schedule_upload(self, time_str):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        logging.info(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ {time_str}")
        schedule.every().day.at(time_str).do(self.upload_products)
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫")
        logging.info("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for job in schedule.jobs:
            logging.info(f"  - {job}")
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Kaspi.kz")
    print("=" * 60)
    
    uploader = KaspiAutoUploader()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 21:43 (–∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
    uploader.set_upload_limit("21:43")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:45 (–ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞)
    uploader.schedule_upload("21:45")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
    uploader.schedule_upload("09:00")  # –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞
    uploader.schedule_upload("15:00")  # –î–Ω–µ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    
    print("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
    print("  - 09:00 - –£—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
    print("  - 15:00 - –î–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è") 
    print("  - 21:45 - –í–µ—á–µ—Ä–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ (–ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞)")
    print("")
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å
        if uploader.check_upload_availability():
            print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–π—á–∞—Å...")
            uploader.upload_products()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        uploader.run_scheduler()
        
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        print("\n‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
