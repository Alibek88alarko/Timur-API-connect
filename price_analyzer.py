#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Al-Style API
"""
import json
from Script import get_al_style_products

def analyze_prices():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Al-Style")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    products = get_al_style_products()
    
    if not products:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_products = len(products)
    price_stats = {
        'price1_zero': 0,
        'price2_zero': 0,
        'price1_one': 0,
        'price2_one': 0,
        'price1_empty': 0,
        'price2_empty': 0,
        'price1_normal': 0,
        'price2_normal': 0,
        'both_empty': 0
    }
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    problematic_products = []
    
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:")
    print("-" * 60)
    
    for i, product in enumerate(products[:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]
        price1 = product.get('price1')
        price2 = product.get('price2')
        article = product.get('article_pn') or product.get('article', '–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
        
        print(f"{i:2d}. {name}")
        print(f"    –ê—Ä—Ç–∏–∫—É–ª: {article}")
        print(f"    price1: {price1} (—Ç–∏–ø: {type(price1)})")
        print(f"    price2: {price2} (—Ç–∏–ø: {type(price2)})")
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã –∫–∞–∫ –≤ –∫–æ–¥–µ
        final_price = price2 or price1 or '0'
        print(f"    –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ü–µ–Ω—ã
        if final_price in ['0', '1', 0, 1]:
            problematic_products.append({
                'name': name,
                'article': article,
                'price1': price1,
                'price2': price2,
                'final_price': final_price
            })
            print(f"    ‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –¶–ï–ù–ê!")
        
        print()
    
    # –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìà –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:")
    print("-" * 60)
    
    for product in products:
        price1 = product.get('price1')
        price2 = product.get('price2')
        
        # –ê–Ω–∞–ª–∏–∑ price1
        if price1 is None or price1 == '':
            price_stats['price1_empty'] += 1
        elif str(price1) == '0':
            price_stats['price1_zero'] += 1
        elif str(price1) == '1':
            price_stats['price1_one'] += 1
        else:
            price_stats['price1_normal'] += 1
        
        # –ê–Ω–∞–ª–∏–∑ price2
        if price2 is None or price2 == '':
            price_stats['price2_empty'] += 1
        elif str(price2) == '0':
            price_stats['price2_zero'] += 1
        elif str(price2) == '1':
            price_stats['price2_one'] += 1
        else:
            price_stats['price2_normal'] += 1
        
        # –û–±–∞ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
        if (price1 is None or price1 == '') and (price2 is None or price2 == ''):
            price_stats['both_empty'] += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
        final_price = price2 or price1 or '0'
        if str(final_price) in ['0', '1']:
            problematic_products.append({
                'name': product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50],
                'article': product.get('article_pn') or product.get('article', '–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞'),
                'price1': price1,
                'price2': price2,
                'final_price': final_price
            })
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
    print(f"")
    print(f"Price1 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –ü—É—Å—Ç—ã–µ: {price_stats['price1_empty']}")
    print(f"  - –ù—É–ª–∏: {price_stats['price1_zero']}")
    print(f"  - –ï–¥–∏–Ω–∏—Ü—ã: {price_stats['price1_one']}")
    print(f"  - –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ: {price_stats['price1_normal']}")
    print(f"")
    print(f"Price2 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –ü—É—Å—Ç—ã–µ: {price_stats['price2_empty']}")
    print(f"  - –ù—É–ª–∏: {price_stats['price2_zero']}")
    print(f"  - –ï–¥–∏–Ω–∏—Ü—ã: {price_stats['price2_one']}")
    print(f"  - –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ: {price_stats['price2_normal']}")
    print(f"")
    print(f"–û–±–∞ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ: {price_stats['both_empty']}")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    print(f"\nüö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ü–µ–Ω–∞ 0 –∏–ª–∏ 1 —Ç–≥): {len(problematic_products)}")
    print("-" * 60)
    
    for i, product in enumerate(problematic_products[:20], 1):  # –ü–µ—Ä–≤—ã–µ 20
        print(f"{i:2d}. {product['name']}")
        print(f"    –ê—Ä—Ç–∏–∫—É–ª: {product['article']}")
        print(f"    price1: {product['price1']}")
        print(f"    price2: {product['price2']}")
        print(f"    –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {product['final_price']} —Ç–≥")
        print()
    
    if len(problematic_products) > 20:
        print(f"... –∏ –µ—â–µ {len(problematic_products) - 20} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–∞–π–ª
    if problematic_products:
        with open('problematic_prices.json', 'w', encoding='utf-8') as f:
            json.dump(problematic_products, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ problematic_prices.json")

if __name__ == "__main__":
    analyze_prices()
