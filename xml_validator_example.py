"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è XML –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–ª—è Kaspi.kz
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ XML —Ñ–∞–π–ª–æ–≤
"""

from xml_validator import KaspiXMLValidator, validate_kaspi_xml
import logging

def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    validator = KaspiXMLValidator()
    
    # –ü—Ä–∏–º–µ—Ä 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    print("=== –ü—Ä–∏–º–µ—Ä 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ ===")
    xml_file = "kaspi_price_list.xml"
    
    valid, message = validator.validate_xml_file(xml_file)
    if valid:
        print(f"‚úÖ –§–∞–π–ª {xml_file} –≤–∞–ª–∏–¥–µ–Ω: {message}")
    else:
        print(f"‚ùå –§–∞–π–ª {xml_file} –Ω–µ –≤–∞–ª–∏–¥–µ–Ω: {message}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ===")
    with open(xml_file, 'r', encoding='utf-8') as f:
        xml_content = f.read()
    
    structure_ok, struct_message = validator.check_required_elements(xml_content)
    if structure_ok:
        print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {struct_message}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {struct_message}")
    
    # –ü—Ä–∏–º–µ—Ä 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–æ–±–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ===")
    validate_kaspi_xml(xml_file)

def create_test_xml():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π XML –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫"""
    
    # –ü—Ä–∏–º–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ XML (–±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    invalid_xml = """<?xml version="1.0" encoding="UTF-8"?>
<kaspi_catalog xmlns="kaspiShopping" date="2025-07-17T14:00:00">
    <!-- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç company –∏ merchantid -->
    <offers>
        <offer sku="test123">
            <model>Test Product</model>
            <!-- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç brand –∏ price -->
        </offer>
    </offers>
</kaspi_catalog>"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π XML
    with open("test_invalid.xml", 'w', encoding='utf-8') as f:
        f.write(invalid_xml)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π XML
    print("=== –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ XML ===")
    validator = KaspiXMLValidator()
    
    valid, message = validator.check_required_elements(invalid_xml)
    if not valid:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {message}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    import os
    os.remove("test_invalid.xml")

if __name__ == "__main__":
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è XML –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–ª—è Kaspi.kz")
    print("=" * 50)
    
    example_usage()
    
    print("\n" + "=" * 50)
    create_test_xml()
    
    print("\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML")
    print("‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º—ã Kaspi.kz") 
    print("‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –º–æ–¥—É–ª—å –∏–ª–∏ standalone")
